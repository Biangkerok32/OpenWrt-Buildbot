#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Test bcm27xx/bcm2711 openwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * 0,2,4,6
  # watch:
  #   types: started

env:
  CONFIG_FILE: config/bcm27xx/bcm2711.config
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-18.06-k5.4
  DIY_SH: scripts/custom.sh
  WEB_ROOT_PATH: /data/dnmp/www/openwrt.cc
  TOOLCHAIN_TAG: toolchain
  FIRMWARE_RELEASE_UPLOAD: true
  CLASH_BINARY_PLATFORM: armv8
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: project-rpi4

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: Clean Environment
        run: |
          sudo umount /dev/loop*p1 || true
          sudo losetup -D || true
          sudo umount overlay || true

      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          mkdir -p workspace

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRT_ROOT_PATH::$(echo $PWD)"

      - name: Generate Toolchain Config
        run: |
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_OWNER::$(echo $SOURCE_OWNER)"
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_REPO::$(echo $SOURCE_REPO)"
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_TARGET::$(echo $DEVICE_TARGET)"
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_SUBTARGET::$(echo $DEVICE_SUBTARGET)"
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_PLATFORM::$(echo $DEVICE_PLATFORM)"
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "::set-output name=TOOLCHAIN_IMAGE::$(echo $TOOLCHAIN_IMAGE)"

      - name: Compare Toolchain Hash
        id: hash
        run: |
          cd $OPENWRT_ROOT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_HASH::$(echo $CURRENT_HASH)"
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(cat /data/toolchain/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "::set-output name=REBUILD_TOOLCHAIN::true"
          fi

      - name: Install Feeds
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig > /dev/null 2>&1

      - name: Compile Tools
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) BUILD_LOG=1 || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) BUILD_LOG=1 || make toolchain/compile -j1 V=s
          ./scripts/feeds clean
          rm -rf .config* bin dl

      - name: Upload Job Logs
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: Logs-${{ github.job }}
          path: ${{ env.OPENWRT_ROOT_PATH }}/logs
          if-no-files-found: ignore

      - name: Collect Workflows Logs
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          mkdir -p output/logs
          mv $OPENWRT_ROOT_PATH/logs output/logs/${{ github.job }}

      - name: Generate Toolchain Image
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          mkdir -p /data/toolchain
          cd workspace
          mksquashfs openwrt /data/toolchain/$TOOLCHAIN_IMAGE.img -force-gid 1000 -force-uid 1000 -comp lz4
          echo $CURRENT_HASH > /data/toolchain/$TOOLCHAIN_IMAGE.hash

      - name: Clean Process
        if: always()
        run: |
          sync
          mkdir empty
          sudo rsync --delete-before --force -r empty/ workspace/
          sudo rm -rf empty workspace

  Firmware:
    needs: [Toolchain]
    runs-on: project-rpi4

    outputs:
      WORKSPACE_LOOP_DEVNAME: ${{ steps.init.outputs.WORKSPACE_LOOP_DEVNAME }}

    steps:
      - name: Restore Variables
        run: |
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@main

      - name: Prepare Toolchain Image
        run: |
          mkdir -p workspace
          cd workspace
          mkdir -p openwrt openwrt-ro workdir overlay
          sudo mount -o loop /data/toolchain/$TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          sudo chown suling:suling $OPENWRT_ROOT_PATH
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: Import Build Keys
        env:
          BUILD_PRIVATEKEY: ${{ secrets.BUILD_PRIVATEKEY }}
          BUILD_PUBLICKEY: ${{ secrets.BUILD_PUBLICKEY }}
        if: env.BUILD_PRIVATEKEY != null && env.BUILD_PUBLICKEY != null
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$BUILD_PRIVATEKEY" > key-build
          echo -e "$BUILD_PUBLICKEY" > key-build.pub
          wc -c key-build key-build.pub
          export PUBLICKEY_FINGERPRINT=$(usign -F -p key-build.pub)
          mkdir -p files/etc/opkg/keys
          cp key-build.pub files/etc/opkg/keys/$PUBLICKEY_FINGERPRINT

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cat config/firmware-extra.config >> $OPENWRT_ROOT_PATH/.config
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          cd $OPENWRT_ROOT_PATH
          echo -e "CONFIG_USB_LAN78XX=y\nCONFIG_USB_NET_DRIVERS=y" >> target/linux/bcm27xx/bcm2711/config-5.4
          sed -i 's/36/44/g;s/VHT80/VHT20/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh
          $GITHUB_WORKSPACE/$DIY_SH
          $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_BINARY_PLATFORM
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          cat $OPENWRT_ROOT_PATH/.config

      - name: Upload Job Logs
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: Logs-${{ github.job }}
          path: ${{ env.OPENWRT_ROOT_PATH }}/logs
          if-no-files-found: ignore

      - name: Collect Workflows Logs
        run: |
          mkdir -p output/logs
          mv $OPENWRT_ROOT_PATH/logs output/logs/${{ github.job }}

      - name: Clean Process
        if: always()
        run: |
          sync
          sudo umount $OPENWRT_ROOT_PATH || true
          sudo umount workspace/openwrt-ro || true
          mkdir empty
          sudo rsync --delete-before --force -r empty/ workspace/
          sudo rm -rf empty workspace
