#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build IPQ40xx OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 2 * * 2,4,6
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-18.06-k5.4
  CONFIG_FILE: config/ipq40xx/ipq40xx-openwrt-target.config
  DIY_SH: scripts/project-openwrt.sh
  WEBROOT: /data/dnmp/www/openwrt.cc
  RUNNER: project-gdock

jobs:
  Toolchain:
    runs-on: project-gdock

    outputs:
      TOOCHAIN_LOOP: ${{ steps.init.outputs.TOOCHAIN_LOOP }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          rm -rf openwrt.img
          fallocate -l 50G openwrt.img
          echo 'type=83' | sfdisk openwrt.img
          export TOOCHAIN_LOOP="sudo losetup -f -P --show openwrt.img"
          echo "TOOCHAIN_LOOP=$TOOCHAIN_LOOP" >> $GITHUB_ENV
          echo "::set-output name=TOOCHAIN_LOOP::$(echo $TOOCHAIN_LOOP)"
          sudo mkfs.ext4 ${TOOCHAIN_LOOP}p1
          mkdir openwrt
          sudo mount ${TOOCHAIN_LOOP}p1 openwrt
          sudo chown -R suling:suling openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Clone Source Code
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH
          mv immortalwrt/* openwrt
          mv immortalwrt/.git* openwrt

      - name: Update Feeds
        id: update
        run: |
          cd $OPENWRTROOT
          chmod +x ../scripts/*.sh
          ../scripts/revert-docker.sh

      - name: Install Feeds
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRTROOT/files
          cp $CONFIG_FILE $OPENWRTROOT/.config
          cat config/firmware-extra.config >> $OPENWRTROOT/.config
          cat config/docker-support.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          ../$DIY_SH
          ../scripts/preset-clash-core.sh armv7
          ../scripts/preset-terminal-tools.sh

      - name: Download All Packages
        id: package
        run: |
          cd $OPENWRTROOT
          wget -q https://raw.githubusercontent.com/openwrt/openwrt/master/scripts/download.pl -O scripts/download.pl
          rm -rf dl
          cp -r /data/cache/dl .
          make defconfig
          echo -e "$(nproc) threads download"
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Tools
        id: tools
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) threads compile"
          make tools/install -j$(nproc) || make tools/install -j1 V=s

      - name: Compile Toolchain
        id: toolchain
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) threads compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s

  Firmware:
    needs: [Toolchain]
    runs-on: project-gdock
    outputs:
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}
      FIEMWARE_LOOP: ${{ steps.init.outputs.FIEMWARE_LOOP }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        id: init
        run: |
          mv /data/disk/$RUNNER/openwrt.img .
          export FIEMWARE_LOOP="sudo losetup -f -P --show openwrt.img"
          echo "FIEMWARE_LOOP=$FIEMWARE_LOOP" >> $GITHUB_ENV
          echo "::set-output name=FIEMWARE_LOOP::$(echo $FIEMWARE_LOOP)"
          mkdir openwrt
          sudo mount ${FIEMWARE_LOOP}p1 openwrt
          sudo chown -R suling:suling openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Compile Firmware Packages
        id: compile
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) threads compile"
          make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j$(nproc) || make package/compile -j1 V=s
          make package/index
          cd $OPENWRTROOT/bin/packages/*
          PLATFORM=$(basename `pwd`)
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "::set-output name=TARGET::$(echo $TARGET)"
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=FIRMWARE::$(echo $PWD)"
          echo "::set-output name=COMPILE_STATUS::success"

      - name: Generate Firmware
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
          cd data/opkg
          sed -i "s/subtarget/$SUBTARGET/g" distfeeds.conf
          sed -i "s/target\//$TARGET\//g" distfeeds.conf
          sed -i "s/platform/$PLATFORM/g" distfeeds.conf
          cd $OPENWRTROOT
          mkdir -p files/etc/opkg
          cp ../data/opkg/distfeeds.conf files/etc/opkg/distfeeds.conf
          mkdir -p files/www/snapshots
          cp -r bin/targets files/www/snapshots
          mkdir -p files/etc/uci-defaults/
          cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/bin
          cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
          make package/install -j1 V=s
          make target/install -j1 V=s
          make checksum
          echo "::set-output name=GENERATE_STATUS::success"
          mkdir -p $OPENWRTROOT/output
          cp -r bin $OPENWRTROOT/output

      - name: Compress Bin Folder
        if: steps.generate.outputs.GENERATE_STATUS == 'success'
        run: |
          cd $OPENWRTROOT/output
          zip -q -s 500m -r bin-archive.zip bin
          rm -rf bin

      - name: Upload Bin Archive
        uses: actions/upload-artifact@main
        if: steps.generate.outputs.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/output

  Prepare:
    needs: [Toolchain, Firmware]
    runs-on: project-gdock

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "TOOCHAIN_LOOP=$(echo '${{needs.Toolchain.outputs.TOOCHAIN_LOOP}}')" >> $GITHUB_ENV
          echo "FIEMWARE_LOOP=$(echo '${{needs.Firmware.outputs.FIEMWARE_LOOP}}')" >> $GITHUB_ENV

      - name: Prepare Disk Image
        if: always()
        run: |
          sync
          sudo umount ${TOOCHAIN_LOOP}p1 || sudo umount ${TOOCHAIN_LOOP}p1 || true
          sudo losetup -D || true
          mkdir -p /data/disk/$RUNNER
          mv openwrt.img /data/disk/$RUNNER

  Upload:
    needs: [Firmware]
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV

      - name: Download Bin Archive
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt

      - name: Decompress Bin Folder
        if: env.GENERATE_STATUS == 'success'
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          zip -q -s 0 bin-archive.zip --out bin.zip
          unzip bin.zip
          cd bin/targets/$TARGET/$SUBTARGET
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Deploy Files To Server
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/snapshots/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.REMOTE_PRIVATEKEY}}"
        if: env.GENERATE_STATUS == 'success' && env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.REMOTE_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/snapshots/targets/$TARGET/$SUBTARGET'"
          rsync -chav --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/archive/$(date +%Y)/$(date +%m)/$(date +%d)/snapshots/targets/$TARGET && \
          cp -rf $WEBROOT/snapshots/targets/$TARGET/$SUBTARGET $WEBROOT/archive/$(date +%Y)/$(date +%m)/$(date +%d)/snapshots/targets/$TARGET'"
          echo "::warning file=Firmware-OpenWrt.cc::Download Link: https://openwrt.cc/snapshots/targets/$TARGET/$SUBTARGET"

